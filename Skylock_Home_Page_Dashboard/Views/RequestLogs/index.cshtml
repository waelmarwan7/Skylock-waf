
@model List<Grad_Project_Dashboard_1.Models.RequestLogsClass>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Request Logs</title>
  <link rel="stylesheet" href="~/css/request_logs.css" />

</head>

    <style>
    .tab.active {
      background-color: #333;
      color: white;
    }
    .hidden {
      display: none;
    }


    
:root {
  --primary-color: #0d1117;
  --sidebar-color: #161b22;
  --button-color: #58a6ff;
  --secondary-color: #3498db;
  --accent-color: #e74c3c;
  --light-color: #ecf0f1;
  --dark-color: #2c3e50;
  --text-color: #c9d1d9;
  --border-color: #505559;
}

body {
  background-color: var(--primary-color);
  color: var(--text-color);
  font-family: 'Segoe UI', sans-serif;
}

.dashboard {
  display: flex;
  height: 100vh;
}

.logo {
  padding-bottom: 30px;
  font-size: 30px;
  font-weight: bold;
  color: white;
  text-decoration: none;
}

.logo span {
  color: var(--secondary-color);
}
  
  .sidebar {
    width: 250px;
    background: #161b22;
    padding: 20px;
  }
  
  .sidebar h2 {
    color: white;
    font-size: 20px;
    margin-bottom: 30px;
  }

.sidebar nav a {
  display: block;
  padding: 17px 0;
  color: #8b949e;
  text-decoration: none;
  font-size: 17px;
}

.sidebar nav a.active::before {
  content: "•"; /* or use "▶" if you prefer */
  color: #1e90ff;
  position: absolute;
  left: 10px;
}

  
  .sidebar nav a.active,
  .sidebar nav a:hover {
    color: #58a6ff;
  }
  
  .main-content {
    flex: 1;
    padding: 30px;
  }
  
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .filters {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .filters .tab {
    background: transparent;
    border: none;
    color: #8b949e;
    font-size: 14px;
    cursor: pointer;
  }
  
  .filters .tab.active {
    color: #58a6ff;
    font-weight: bold;
  }
  
  .filters input[type="text"] {
    padding: 6px 12px;
    background-color: #0d1117;
    border: 1px solid #30363d;
    border-radius: 6px;
    color: #c9d1d9;
    font-size: 14px;
  }
  
  table {
    width: 100%;
    margin-top: 20px;
    border-collapse: collapse;
    background-color: #161b22;
    border-radius: 8px;
    overflow: hidden;
  }
  
  th, td {
    padding: 14px 16px;
    border-bottom: 1px solid #21262d;
    font-size: 14px;
  }
  
  th {
    color: #8b949e;
    text-align: left;
  }
  
  tr:hover {
    background-color: #21262d;
  }
  
  .tag {
    font-size: 13px;
    font-weight: bold;
    border-radius: 6px;
    padding: 4px 10px;
  }
  
  .allowed {
    background-color: #21262d;
    color: #58a6ff;
  }
  
  .blocked {
    background-color: #3c2f2f;
    color: #ff7b72;
  }

  </style>


<body>
  <div class="dashboard">
    <aside class="sidebar">
      <a href="~/home.html" class="logo">WAF<span id="logo">Security</span></a>
               <nav>
                <a href="/Dashboard/Index">Dashboard</a>
                <a href="/RequestLogs/Index">Request Logs</a>
                <a href="/RateLimiting/Index">Rate Limiting</a>
                <a href="/CustomRule/Index">CustomRule rules</a>
                <a href="/UserDomains/Index">Domains Control</a>
                <a href="/Settings/Index">Settings</a>
                <a href="/Account/Logout">Logout</a>
            </nav>
    </aside>

    <main class="main-content">
      <header class="header">
        <h1>Request Logs</h1>
        <div class="filters">
          <button class="tab active" data-filter="all">All</button>
          <button class="tab" data-filter="allowed">Allowed</button>
          <button class="tab" data-filter="rules">Blocked by Rules Engine</button>
          <button class="tab" data-filter="ai">Blocked by AI</button>
          <input type="text" placeholder="Search" />
        </div>
      </header>

      <table>
        <thead>
          <tr>
            <th>Time</th>
            <th>Source IP</th>
            @* <th>Domain</th> *@
            <th>Method</th>
            <th>Path</th>
            <th>Threat Level</th>
            <th>Block Reason</th>
            <th>Body</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody id="log-body">
      
        </tbody>
      </table>

      <div style="margin-top: 20px; text-align: center;"></div>
  <button id="prevPage" style="margin-right: 10px;">⬅ Previous</button>
  <span id="pageIndicator">Page 1</span>
  <button id="nextPage" style="margin-left: 10px;">Next ➡</button>
</div>
    </main>
  </div>


<script>
let logsData = []; // All logs
let filteredData = []; // Currently filtered logs
let currentPage = 1;
const rowsPerPage = 15;
let currentFilter = "all";
let refreshInterval;

async function loadRequestLogs() {
  try {
    const res = await fetch("/RequestLogs/RequestServer");
    const newData = await res.json();
    
    // Only update if data actually changed
    if (JSON.stringify(logsData) !== JSON.stringify(newData)) {
      logsData = newData;
      applyCurrentFilter(false); // Don't reset page on auto-refresh
    }
  } catch (error) {
    console.error("Failed to load request logs:", error);
  }
}

function renderPage() {
  const tbody = document.getElementById("log-body");
  tbody.innerHTML = "";

  const start = (currentPage - 1) * rowsPerPage;
  const end = start + rowsPerPage;
  const pageData = filteredData.slice(start, end);

  pageData.forEach(log => {
    const tr = document.createElement("tr");

    const statusCode = log["status"] ?? 0;
    const message = (log["message"] || "-").toString().trim();
    const anomalyScore = log["anomaly_score"] || "-";

    let status, reason;

    if (statusCode === 403) {
      status = "blocked";
      // Improved classification logic
      if (message !== "-" && !message.includes("AI") && !message.includes("anomaly")) {
        reason = "rules";
      } else {
        reason = "ai";
      }
    } else {
      status = "allowed";
      reason = "none";
    }

    tr.innerHTML = `
      <td>${log["time_stamp"] ?? "-"}</td>
      <td>${log["ip"] ?? "-"}</td>
      <td>${log["method"] ?? "-"}</td>
      <td>${log["uri"] ?? "-"}</td>
      <td>${anomalyScore}</td>
      <td>${message}</td>
      <td>${log["body"] ?? "-"}</td>
      <td class="${status === 'blocked' ? 'blocked tag' : 'allowed tag'}">
        ${status === 'blocked' ? 'Blocked' : 'Allowed'}
      </td>
    `;
    tbody.appendChild(tr);
  });

  updatePaginationControls();
}

function applyCurrentFilter(resetPage = true) {
  filteredData = logsData.filter(log => {
    const statusCode = log["status"] ?? 0;
    const message = (log["message"] || "-").toString().trim();

    switch (currentFilter) {
      case "all":
        return true;
      case "allowed":
        return statusCode !== 403;
      case "rules":
        return statusCode === 403 && 
               message !== "-" && 
               !message.includes("AI") && 
               !message.includes("anomaly");
      case "ai":
        return statusCode === 403 && 
               (message === "-" || 
                message.includes("AI") || 
                message.includes("anomaly"));
      default:
        return true;
    }
  });

  if (resetPage) {
    currentPage = 1;
  }
  renderPage();
}

function updatePaginationControls() {
  const totalPages = Math.ceil(filteredData.length / rowsPerPage) || 1;
  document.getElementById("pageIndicator").textContent = `Page ${currentPage} of ${totalPages}`;
  document.getElementById("prevPage").disabled = currentPage <= 1;
  document.getElementById("nextPage").disabled = currentPage >= totalPages;
}

// Event listeners
document.getElementById("prevPage").addEventListener("click", () => {
  if (currentPage > 1) {
    currentPage--;
    renderPage();
  }
});

document.getElementById("nextPage").addEventListener("click", () => {
  const totalPages = Math.ceil(filteredData.length / rowsPerPage);
  if (currentPage < totalPages) {
    currentPage++;
    renderPage();
  }
});

document.querySelectorAll(".tab").forEach(tab => {
  tab.addEventListener("click", () => {
    document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
    tab.classList.add("active");
    currentFilter = tab.dataset.filter;
    applyCurrentFilter();
  });
});

function setupAutoRefresh() {
  // Clear existing interval if any
  if (refreshInterval) {
    clearInterval(refreshInterval);
  }
  // Set new interval
  refreshInterval = setInterval(() => {
    loadRequestLogs();
  }, 5000);
}

window.addEventListener("DOMContentLoaded", () => {
  loadRequestLogs();
  setupAutoRefresh();
});
</script>




 </body>
 </html>
